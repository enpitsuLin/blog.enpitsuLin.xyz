---
export interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = '/placeholder-social.png' } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

{
  import.meta.env.PROD && (
    <script
      async
      defer
      data-website-id="43380447-39ed-42d7-8524-4618e3dd6a68"
      data-do-not-track="true"
      src="https://umami.enpitsulin.xyz/umami-analytics.js"
    />
  )
}
<link rel="alternate" type="application/rss+xml" href="/rss.xml" />

<link
  rel="preload"
  href="//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css"
  as="style"
  onload="this.rel='stylesheet'"
/>

<link
  rel="preload"
  href="//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css"
  as="style"
  onload="this.rel='stylesheet'"
/>
<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
  }
</script>
