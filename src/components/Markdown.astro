---
import { Result as TocResult, toc } from 'mdast-util-toc';
import rehypeRaw from 'rehype-raw';
import rehypeStringify from 'rehype-stringify';
import rehypeAutolinkHeadings from 'rehype-autolink-headings';
import remarkCodeTitles from 'remark-flexible-code-titles';
import rehypePrismDiff from 'rehype-prism-diff';
import rehypePrismPlus from 'rehype-prism-plus';
import rehypeSlug from 'rehype-slug';
import rehypeRewrite from 'rehype-rewrite';
import rehypeComponents from '~/lib/rehype-components';
import remarkGfm from 'remark-gfm';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import remarkDirective from 'remark-directive';
import remarkDirectiveRehype from 'remark-directive-rehype';
import { unified } from 'unified';

import { PostToc } from './PostToc';

interface Props {
  content: string;
}
const { content } = Astro.props;
function mdToHtml(markdown: string) {
  let contentHtml = '';
  const env = {
    toc: null as TocResult | null
  };
  try {
    const result = unified()
      .use(remarkParse)
      .use(() => (tree) => {
        env.toc = toc(tree, { tight: true, ordered: true });
      })
      .use(remarkGfm)
      .use(remarkCodeTitles, {
        title: false,
        containerProperties: (lang, title) => ({
          ['data-language']: lang,
          ['data-title']: title
        })
      })
      .use(remarkDirective)
      .use(remarkDirectiveRehype)
      .use(remarkRehype, { allowDangerousHtml: true })
      .use(rehypeComponents, { components: {} })
      .use(rehypeStringify)
      .use(rehypeRaw)
      .use(rehypeRewrite, {
        rewrite: (node) => {
          if (node.type === 'element' && node.tagName === 'img') {
            node.properties = Object.assign(node.properties ?? {}, {
              'data-zoomable': true,
              loading: 'lazy'
            });
          }
          if (
            node.type === 'element' &&
            ['h2', 'h3', 'h4', 'h5', 'h6'].includes(node.tagName)
          ) {
            node.properties = Object.assign(node.properties ?? {}, {
              className: 'group'
            });
          }
        }
      })
      .use(rehypeSlug)
      .use(rehypePrismPlus, { ignoreMissing: true })
      .use(rehypePrismDiff)
      .use(rehypeAutolinkHeadings, {
        behavior: 'append',
        properties: {
          ariaHidden: 'true',
          tabIndex: -1,
          class: 'absolute -left-6'
        },
        content: {
          type: 'element',
          tagName: 'span',
          properties: {
            className: ['op-0', 'group-hover:op-100']
          },
          children: [
            {
              type: 'text',
              value: '#'
            }
          ]
        }
      })
      .processSync(markdown);

    contentHtml = result.toString();
  } catch (error) {
    console.error(error);
  }
  return { html: contentHtml, env };
}
const { html, env } = mdToHtml(content);
---

<div class="relative">
  <div class="prose pt-4 pb-8 max-w-unset">
    {html ? <Fragment set:html={html} /> : <slot />}
  </div>
  {env.toc && <PostToc client:only="solid-js" data={env.toc} />}
</div>
