<theme-toggle>
  <button
    type="button"
    class="theme-toggle"
    id="theme-toggle"
    title="Toggles light & dark"
    aria-label="system"
    aria-live="polite"
  >
    <svg
      class="sun-and-moon"
      aria-hidden="true"
      width="24"
      height="24"
      viewBox="0 0 24 24"
    >
      <mask class="moon" id="moon-mask">
        <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
        <circle cx="24" cy="10" r="6" fill="black"></circle>
      </mask>
      <circle
        class="sun"
        cx="12"
        cy="12"
        r="6"
        mask="url(#moon-mask)"
        fill="currentColor"></circle>
      <g class="sun-beams" stroke="currentColor">
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </g>
    </svg>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    button: HTMLButtonElement;
    constructor() {
      super();

      this.button = this.querySelector('button')!;

      /** Set the theme to dark/light mode. */
      const setTheme = (event?: MouseEvent) => {
        const dark = !this.isDark();

        //@ts-expect-error: View Transition api not ready with ts
        if (!document.startViewTransition || this.isReducedMotion()) {
          this.toggleTheme(dark);
          return;
        }
        //@ts-expect-error: View Transition api not ready with ts
        const transition = document.startViewTransition(() => {
          this.toggleTheme(dark);
        });
        let x: number, y: number;
        if (typeof event === 'undefined') {
          x = this.button.getBoundingClientRect().x;
          y = this.button.getBoundingClientRect().y;
        } else {
          x = event.clientX;
          y = event.clientY;
        }

        const endRadius = Math.hypot(
          Math.max(x, innerWidth - x),
          Math.max(y, innerHeight - y)
        );

        transition.ready.then(() => {
          const clipPath = [
            `circle(0px at ${x}px ${y}px)`,
            `circle(${endRadius}px at ${x}px ${y}px)`
          ];
          document.documentElement.animate(
            {
              clipPath: dark ? clipPath : [...clipPath].reverse()
            },
            {
              duration: 500,
              easing: 'ease-in',
              pseudoElement: dark
                ? '::view-transition-new(root)'
                : '::view-transition-old(root)'
            }
          );
        });
      };

      this.button.addEventListener('click', (e) => setTheme(e));
    }

    toggleTheme(dark: boolean) {
      document.documentElement.classList[dark ? 'add' : 'remove']('dark');
      this.button.setAttribute('aria-label', dark ? 'dark' : 'light');
      if (window.DISQUS) {
        setTimeout(() => {
          window.DISQUS.reset({ reload: true });
        }, 500);
      }
    }

    isDark() {
      return document.documentElement.classList.contains('dark');
    }
    isReducedMotion() {
      return (
        window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true
      );
    }
  }
  customElements.define('theme-toggle', ThemeToggle);
</script>
<style is:global>
  @import 'https://unpkg.com/open-props/easings.min.css';
  theme-toggle > button {
    display: block;
  }

  .sun-and-moon > :is(.moon, .sun, .sun-beams) {
    transform-origin: center center;
  }
  .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill);
  }
  .theme-toggle:is(:hover, :focus-visible) > .sun-and-moon > :is(.moon, .sun) {
    fill: var(--icon-fill-hover);
  }

  .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill);
    stroke-width: 2px;
  }

  .theme-toggle:is(:hover, :focus-visible) .sun-and-moon > .sun-beams {
    stroke: var(--icon-fill-hover);
  }

  .dark .sun-and-moon > .sun {
    transform: scale(1.75);
  }
  .dark .sun-and-moon > .sun-beams {
    opacity: 0;
  }
  .dark .sun-and-moon > .moon > circle {
    transform: translateX(-7px);
  }
  @supports (cx: 1) {
    .dark .sun-and-moon > .moon > circle {
      transform: translateX(0);
      cx: 17;
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .sun-and-moon > .sun {
      transition: transform 0.5s var(--ease-elastic-3);
    }
    .sun-and-moon > .sun-beams {
      transition: transform 0.5s var(--ease-elastic-4),
        opacity 0.5s var(--ease-3);
    }
    .sun-and-moon .moon > circle {
      transition: transform 0.25s var(--ease-out-5);
    }
    @supports (cx: 1) {
      .sun-and-moon .moon > circle {
        transition: cx 0.25s var(--ease-out-5);
      }
    }
    .dark .sun-and-moon > .sun {
      transform: scale(1.75);
      transition-timing-function: var(--ease-3);
      transition-duration: 0.25s;
    }
    .dark .sun-and-moon > .sun-beams {
      transform: rotateZ(-25deg);
      transition-duration: 0.15s;
    }
    .dark .sun-and-moon > .moon > circle {
      transition-delay: 0.25s;
      transition-duration: 0.5s;
    }
  }
  .theme-toggle {
    --size: 1.25rem;
    /* neutral-700 */
    --icon-fill: #404040;
    /* neutral-900 */
    --icon-fill-hover: #d97706;
    background: none;
    border: none;
    padding: 0;
    inline-size: var(--size);
    block-size: var(--size);
    aspect-ratio: 1;
    border-radius: 50%;
    cursor: pointer;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    outline-offset: 5px;
  }
  .theme-toggle > svg {
    inline-size: 100%;
    block-size: 100%;
    stroke-linecap: round;
  }
  .dark .theme-toggle {
    /* neutral-200 */
    --icon-fill: #e5e5e5;
    /* neutral-50 */
    --icon-fill-hover: #3b82f6;
  }
</style>
<style is:global>
  ::view-transition-old(root),
  ::view-transition-new(root) {
    animation: none;
    mix-blend-mode: normal;
  }

  .dark::view-transition-old(root) {
    z-index: 1;
  }
  .dark::view-transition-new(root) {
    z-index: 999;
  }

  ::view-transition-old(root) {
    z-index: 999;
  }
  ::view-transition-new(root) {
    z-index: 1;
  }
</style>
