---
import '~/styles/prism.css';
import BasicLayout from '~/layouts/BasicLayout.astro';
import { usePostsSlug, usePost } from '~/lib/sanity';
import Markdown from '~/components/Markdown.astro';
import FormattedDate from '~/components/FormattedDate.astro';
import ScrollToTop from '~/components/ScrollToTop.astro';

export async function getStaticPaths() {
  return usePostsSlug().then((slugs) =>
    slugs.map((slug) => ({
      params: slug
    }))
  );
}
const { slug } = Astro.params;
if (!slug) return Astro.redirect('/404');
const post = await usePost(slug);
if (!post) return Astro.redirect('/404');
---

<BasicLayout title={post.title} description={post.summary}>
  <div class="flex items-center flex-col">
    <div class="pt-14 pb-6 flex flex-col items-center text-base border-b">
      <FormattedDate
        date={new Date(post.date)}
        itemprop="datePublished"
        class="text-sm text-neutral-700 dark:text-neutral-200"
      />
      <h1 class="text-4xl font-bold text-center">{post.title}</h1>
    </div>
    <div class="prose pt-4">
      <Markdown content={post.content} />
    </div>
  </div>
  <ScrollToTop />
</BasicLayout>

<script>
  import type { Zoom, ZoomSelector, ZoomOptions } from 'medium-zoom';
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      ([e]) => {
        if (e.isIntersecting) {
          const preEl = e.target as HTMLPreElement;
          const copyButton = document.createElement('button');
          copyButton.classList.add('code-copy-button');
          copyButton.setAttribute('type', 'button');
          copyButton.setAttribute('aria-label', 'Copy code');
          copyButton.innerText = 'copy';
          copyButton.onclick = () => {
            navigator.clipboard.writeText(preEl.innerText);
            copyButton.innerText = 'copied';
            setTimeout(() => {
              copyButton.innerText = 'copy';
            }, 1000);
          };
          if (!preEl.parentNode) return;
          preEl.parentNode.insertBefore(copyButton, preEl);
          observer.unobserve(e.target);
        }
      },
      { threshold: [0] }
    );
    const proseEl = document.querySelector('div.prose') as HTMLDivElement;
    const preElList = proseEl.querySelectorAll('pre');
    preElList.forEach((el) => {
      observer.observe(el);
    });

    const mediumZoomScript = document.createElement('script');
    mediumZoomScript.setAttribute(
      'src',
      'https://unpkg.com/medium-zoom@1.0.8/dist/medium-zoom.min.js'
    );
    mediumZoomScript.onload = () => {
      mediumZoom('[data-zoomable]', { background: 'var(--e-bg)' });
    };
    document.querySelector('head')!.appendChild(mediumZoomScript);
  });
  declare const mediumZoom: (
    selector?: ZoomSelector,
    options?: ZoomOptions
  ) => Zoom;
</script>
