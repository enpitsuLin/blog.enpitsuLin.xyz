---
import type { List } from 'mdast';
import ArticleLicense from '~/components/ArticleLicense.astro';
import { Comments } from '~/components/Comments';
import FormattedDate from '~/components/FormattedDate.astro';
import MediumZoomScript from '~/components/MediumZoomScript.astro';
import { PostToc } from '~/components/PostToc';
import ScrollToTop from '~/components/ScrollToTop.astro';
import BasicLayout from '~/layouts/BasicLayout.astro';
import { usePost } from '~/lib/content';
import '~/styles/prism.css';

const { slug } = Astro.params;
if (!slug) return Astro.redirect('/404');
const post = await usePost(slug);
if (!post) return Astro.redirect('/404');
const { Content, remarkPluginFrontmatter } = await post.render();
const tocData = remarkPluginFrontmatter['toc'].map as List;
---

<BasicLayout title={post.data.title} description={post.data.excerpt}>
  <div
    flex="~ col items-center gap-2"
    border="b black/8 dark:white/8"
    pt-14
    pb-6
    text-base
  >
    <FormattedDate
      date={new Date(post.data.date)}
      itemprop="datePublished"
      class="text-sm text-neutral-700 dark:text-neutral-200"
    />
    <h1 text-4xl font-bold text-center>{post.data.title}</h1>
  </div>
  <div relative>
    <div prose pt-4 pb-8 max-w-unset>
      <Content />
    </div>
    <PostToc client:only="solid-js" data={tocData} />
  </div>
  <ArticleLicense
    url={Astro.url}
    title={post.data.title}
    date={post.data.date}
    updateDate={post.data.updateDate ?? post.data.date}
  />
  <Comments
    url={new URL(Astro.url.pathname, Astro.site)}
    slug={post.slug}
    client:visible
  />
  <ScrollToTop />
</BasicLayout>

<MediumZoomScript />
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      ([e]) => {
        if (e.isIntersecting) {
          const preEl = e.target as HTMLPreElement;
          const copyButton = document.createElement('button');
          copyButton.classList.add('code-copy-button');
          copyButton.setAttribute('type', 'button');
          copyButton.setAttribute('aria-label', 'Copy code');

          const copyButtonIcon = document.createElement('div');
          copyButtonIcon.classList.add('i-ri:file-copy-fill');
          copyButton.append(copyButtonIcon);

          copyButton.onclick = () => {
            navigator.clipboard.writeText(preEl.innerText);
            copyButtonIcon.classList.toggle('i-ri:file-copy-fill');
            copyButtonIcon.classList.toggle('i-ri:check-fill');
            setTimeout(() => {
              copyButtonIcon.classList.toggle('i-ri:file-copy-fill');
              copyButtonIcon.classList.toggle('i-ri:check-fill');
            }, 1000);
          };
          if (!preEl.parentNode) return;
          preEl.parentNode.insertBefore(copyButton, preEl);
          observer.unobserve(e.target);
        }
      },
      { threshold: [0] }
    );
    const proseEl = document.querySelector('[prose=""]') as HTMLDivElement;
    const preElList = proseEl.querySelectorAll('pre');
    preElList.forEach((el) => {
      observer.observe(el);
    });
  });
</script>
